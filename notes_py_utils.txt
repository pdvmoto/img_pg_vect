
additional: throttle based on AAS.
 - ora_aas_init ( conn_obj )
 - ora_aas_chk ( conn_obj ) : if not init, do init + pause + check+pause-yn, if already init: check+pause-yn
 - ora_aas_get_env : get/refresh the paramters from dotenv
 - get cpus: in same query as dbtime 
 - use percentage_uage: nr-aas/nr_cpu, if below threshold: Go. if above: pause
 - in dotenv: threshold_pct, pause_interval_sec


Questions: 
q1: what if no paramters.. ?  dflts 50% threshold and 30sec pause
    what if parametes not in dot-env file? 
q2: if calling ora_aas_chk without initialized values, should we pause anyway? (dflt yes)
q3: what if no access to V$ ? on query-error dflt pause ? 
q4: consider some info to stdout to show pause or not..
q5: when measuring db-time, the results of (long) plsql is only posted at end of call

global variables to be set by functions:
ora_aas_dbtime_prev_ms : last measured value for db-time, to be subtracted to find delta
ora_aas_dbtime_curr_ms : last measured value for db-time, to be subtracted to find delta
ora_aas_prev_dt_epoch  : epoch(sec) when last dbtime was measured, needed to determin interval

parameters, get these from dotenv (.env):
tms_aas_threshold_pct: percent (0-100), above this, pause is taken, dflt 50
tms_aas_pause_sec : sleep-interval in Sec, when 100*AAS/num_cpus is above threshold, dflt 30 sec

pseudo code:
0. load dotenv, duration.py, ora_login.py
    0.1 get ora-credentials from dotenv
1. connect and create conn_obj 
2. init variables using connection: tmr_aas_init ( conn_obj ) 
    2.1 get dotenv + set global vars
    2.2 get first set of vars (what if no access?)
3. do some work, load the database
4. check if pause is needed, tmr_aas_chk ( conn_obj ) : 
    4.0 get dotenv to always refresh global vars (e.g. can be edited on the go)
    4.1 if not init: 
          4.1.1 call init + pause, bcse chk was called, we assume a pause could be beneficial 
        else:
          4.1.2 with sql, get db_time_ms, sysdate_epoch, num_cpus 
          4.1.3 calculate elapsed_ms = 1 + (sysdate_epoch - tmr_aas_dbtime_dt_epoch) * 1000 
                calculate AAS = dbtime_ms / elapsed_ms  (elapsed must be > 0)
                calculate perc_used = 100 * AAS / num_cpu
                set tms_aas_dbtime_prev_ms 
                set tmr_aas_dbtime_dt_epoch 
          4.1.4 if perc_used above threshold (e.g. busy): 
                  sleep n_sec
                endif
        endif
        return ( ms_paused?) and let program continue
5. do work, jump to nr4 for next check

